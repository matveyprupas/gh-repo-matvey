"use strict";(self.webpackChunkh3_consumer_web=self.webpackChunkh3_consumer_web||[]).push([[9618],{"./src/views/FindCare/components/RecurringCareGaps/RecurringCareGaps.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},default:function(){return RecurringCareGaps_stories}});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),useTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js"),uikit=__webpack_require__("./src/uikit/index.ts"),chevron_right_circle=__webpack_require__("./src/assets/icons/chevron-right-circle.svg"),CareGapIcon=__webpack_require__("./src/views/FindCare/components/CareGapIcon/index.ts"),translations=__webpack_require__("./src/locales/translations.ts"),translations_translations=translations.Sq.views.findCare.buttons,RecurringCareGapCard_module_root="RecurringCareGapCard_root__bblBH",RecurringCareGapCard_module_content="RecurringCareGapCard_content__EDmLy",RecurringCareGapCard_module_header="RecurringCareGapCard_header__orFCm",RecurringCareGapCard_module_title="RecurringCareGapCard_title__Ti2uv",RecurringCareGapCard_module_body="RecurringCareGapCard_body__2H9mP",RecurringCareGapCard_module_description="RecurringCareGapCard_description__BIinP",RecurringCareGapCard_module_footer="RecurringCareGapCard_footer__be8eX",jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),RecurringCareGapCard=function RecurringCareGapCard(_ref){var careGap=_ref.careGap,onViewDetails=_ref.onViewDetails,onBookAppointment=_ref.onBookAppointment,t=(0,useTranslation.$)().t;return(0,jsx_runtime.jsx)("li",{children:(0,jsx_runtime.jsx)(uikit.Zb,{className:RecurringCareGapCard_module_root,"data-testid":"recurring-care-gap-card-".concat(careGap.code),children:(0,jsx_runtime.jsxs)("div",{className:RecurringCareGapCard_module_content,children:[(0,jsx_runtime.jsxs)("div",{className:RecurringCareGapCard_module_header,children:[(0,jsx_runtime.jsx)(CareGapIcon.c,{code:careGap.code}),(0,jsx_runtime.jsx)("h3",{className:RecurringCareGapCard_module_title,children:careGap.title})]}),(0,jsx_runtime.jsx)("div",{className:RecurringCareGapCard_module_body,children:(0,jsx_runtime.jsx)("p",{className:RecurringCareGapCard_module_description,children:careGap.description})}),(0,jsx_runtime.jsxs)("div",{className:RecurringCareGapCard_module_footer,children:[(0,jsx_runtime.jsxs)(uikit.zx,{variant:"text",size:"small",onClick:onViewDetails,children:[t(translations_translations.viewDetails),(0,jsx_runtime.jsx)(chevron_right_circle.r,{})]}),(0,jsx_runtime.jsx)(uikit.zx,{variant:"primary",size:"small",onClick:onBookAppointment,children:t(translations_translations.schedule)})]})]})})})};try{RecurringCareGapCard.displayName="RecurringCareGapCard",RecurringCareGapCard.__docgenInfo={description:"",displayName:"RecurringCareGapCard",props:{careGap:{defaultValue:null,description:"",name:"careGap",required:!0,type:{name:"CareGap"}},onViewDetails:{defaultValue:null,description:"",name:"onViewDetails",required:!0,type:{name:"() => void"}},onBookAppointment:{defaultValue:null,description:"",name:"onBookAppointment",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/views/FindCare/components/RecurringCareGapCard/RecurringCareGapCard.tsx#RecurringCareGapCard"]={docgenInfo:RecurringCareGapCard.__docgenInfo,name:"RecurringCareGapCard",path:"src/views/FindCare/components/RecurringCareGapCard/RecurringCareGapCard.tsx#RecurringCareGapCard"})}catch(__react_docgen_typescript_loader_error){}var components=__webpack_require__("./src/components/index.ts"),hooks=__webpack_require__("./src/views/FindCare/hooks/index.ts"),RecurringCareGaps_translations_translations=translations.Sq.views.findCare.recurringCareGaps,RecurringCareGaps_module_root="RecurringCareGaps_root__wtZU4",RecurringCareGaps_module_loading="RecurringCareGaps_loading__k6uTb",RecurringCareGaps=function RecurringCareGaps(_ref){var _onViewDetails=_ref.onViewDetails,_onBookAppointment=_ref.onBookAppointment,t=(0,useTranslation.$)().t,_useCareGaps=(0,hooks.Z)(),openedCareGaps=_useCareGaps.recurringOpenedCareGaps,careGapsCount=_useCareGaps.recurringOpenedCareGapsCount;return _useCareGaps.loading?(0,jsx_runtime.jsx)(uikit.$j,{className:RecurringCareGaps_module_loading}):careGapsCount?(0,jsx_runtime.jsxs)(components.Bn,{"data-testid":"recurring-care-gaps",className:RecurringCareGaps_module_root,children:[(0,jsx_runtime.jsxs)(components.FW,{"aria-label":"".concat(t(RecurringCareGaps_translations_translations.title),", list of ").concat(careGapsCount),children:[t(RecurringCareGaps_translations_translations.title),(0,jsx_runtime.jsx)(components.Jt,{count:careGapsCount})]}),(0,jsx_runtime.jsx)("p",{children:t(RecurringCareGaps_translations_translations.description)}),(0,jsx_runtime.jsx)(components.gy,{children:openedCareGaps.map((function(careGap){return careGap&&(0,jsx_runtime.jsx)(RecurringCareGapCard,{careGap:careGap,onViewDetails:function onViewDetails(){return _onViewDetails(careGap)},onBookAppointment:function onBookAppointment(){return _onBookAppointment(careGap)}},careGap.code)}))})]}):null};try{RecurringCareGaps.displayName="RecurringCareGaps",RecurringCareGaps.__docgenInfo={description:"",displayName:"RecurringCareGaps",props:{onViewDetails:{defaultValue:null,description:"",name:"onViewDetails",required:!0,type:{name:"(careGap: CareGap) => void"}},onBookAppointment:{defaultValue:null,description:"",name:"onBookAppointment",required:!0,type:{name:"(careGap: CareGap) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/views/FindCare/components/RecurringCareGaps/RecurringCareGaps.tsx#RecurringCareGaps"]={docgenInfo:RecurringCareGaps.__docgenInfo,name:"RecurringCareGaps",path:"src/views/FindCare/components/RecurringCareGaps/RecurringCareGaps.tsx#RecurringCareGaps"})}catch(__react_docgen_typescript_loader_error){}var mocks=__webpack_require__("./src/views/FindCare/mocks/index.ts"),RecurringCareGaps_stories={title:"Consumer Web / Find Care / RecurringCareGaps",component:RecurringCareGaps,argTypes:{onViewDetails:{},onBookAppointment:{}}},Default=function Template(args){return(0,jsx_runtime.jsx)("div",{style:{width:1024},children:(0,jsx_runtime.jsx)(mocks.uO,{children:(0,jsx_runtime.jsx)(RecurringCareGaps,(0,objectSpread2.Z)({},args))})})}.bind({});Default.parameters=(0,objectSpread2.Z)({storySource:{source:"(args) => (\n  <div style={{ width: 1024 }}>\n    <MockCareGapsProvider>\n      <RecurringCareGaps {...args} />\n    </MockCareGapsProvider>\n  </div>\n)"}},Default.parameters)},"./src/views/FindCare/mocks/index.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{uO:function(){return MockCareGapsProvider},GL:function(){return MockFindCareProvider},tv:function(){return MockProviderLanguagesProvider}});var types=__webpack_require__("./src/types/index.ts"),objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),globals=__webpack_require__("./node_modules/@apollo/client/utilities/globals/index.js"),printer=__webpack_require__("./node_modules/graphql/language/printer.mjs"),equality_esm=__webpack_require__("./node_modules/@wry/equality/lib/equality.esm.js"),ApolloLink=__webpack_require__("./node_modules/@apollo/client/link/core/ApolloLink.js"),transform=__webpack_require__("./node_modules/@apollo/client/utilities/graphql/transform.js"),stringifyForDisplay=__webpack_require__("./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js"),zen_observable_ts_module=__webpack_require__("./node_modules/zen-observable-ts/module.js"),cloneDeep=__webpack_require__("./node_modules/@apollo/client/utilities/common/cloneDeep.js");function requestToKey(request,addTypename){var requestKey={query:request.query&&(0,printer.S)(addTypename?(0,transform.Gw)(request.query):request.query)};return JSON.stringify(requestKey)}var MockLink=function(_super){function MockLink(mockedResponses,addTypename){void 0===addTypename&&(addTypename=!0);var _this=_super.call(this)||this;return _this.addTypename=!0,_this.mockedResponsesByKey={},_this.addTypename=addTypename,mockedResponses&&mockedResponses.forEach((function(mockedResponse){_this.addMockedResponse(mockedResponse)})),_this}return(0,tslib_es6.ZT)(MockLink,_super),MockLink.prototype.addMockedResponse=function(mockedResponse){var normalizedMockedResponse=this.normalizeMockedResponse(mockedResponse),key=requestToKey(normalizedMockedResponse.request,this.addTypename),mockedResponses=this.mockedResponsesByKey[key];mockedResponses||(mockedResponses=[],this.mockedResponsesByKey[key]=mockedResponses),mockedResponses.push(normalizedMockedResponse)},MockLink.prototype.request=function(operation){var _this=this;this.operation=operation;var configError,key=requestToKey(operation,this.addTypename),unmatchedVars=[],requestVariables=operation.variables||{},mockedResponses=this.mockedResponsesByKey[key],responseIndex=mockedResponses?mockedResponses.findIndex((function(res,index){var mockedResponseVars=res.request.variables||{};return!!(0,equality_esm.D)(requestVariables,mockedResponseVars)||(unmatchedVars.push(mockedResponseVars),!1)})):-1,response=responseIndex>=0?mockedResponses[responseIndex]:void 0;if(response){mockedResponses.splice(responseIndex,1);var newData=response.newData;newData&&(response.result=newData(),mockedResponses.push(response)),response.result||response.error||(configError=new Error("Mocked response should contain either result or error: ".concat(key)))}else configError=new Error("No more mocked responses for the query: ".concat((0,printer.S)(operation.query),"\nExpected variables: ").concat((0,stringifyForDisplay.v)(operation.variables),"\n").concat(unmatchedVars.length>0?"\nFailed to match ".concat(unmatchedVars.length," mock").concat(1===unmatchedVars.length?"":"s"," for this query, which had the following variables:\n").concat(unmatchedVars.map((function(d){return"  ".concat((0,stringifyForDisplay.v)(d))})).join("\n"),"\n"):""));return new zen_observable_ts_module.y((function(observer){var timer=setTimeout((function(){if(configError)try{if(!1!==_this.onError(configError,observer))throw configError}catch(error){observer.error(error)}else response&&(response.error?observer.error(response.error):(response.result&&observer.next("function"==typeof response.result?response.result():response.result),observer.complete()))}),response&&response.delay||0);return function(){clearTimeout(timer)}}))},MockLink.prototype.normalizeMockedResponse=function(mockedResponse){var newMockedResponse=(0,cloneDeep.X)(mockedResponse),queryWithoutConnection=(0,transform.Fo)(newMockedResponse.request.query);__DEV__?(0,globals.kG)(queryWithoutConnection,"query is required"):(0,globals.kG)(queryWithoutConnection,35),newMockedResponse.request.query=queryWithoutConnection;var query=(0,transform.ob)(newMockedResponse.request.query);return query&&(newMockedResponse.request.query=query),newMockedResponse},MockLink}(ApolloLink.i);var react=__webpack_require__("./node_modules/react/index.js"),ApolloClient=__webpack_require__("./node_modules/@apollo/client/core/ApolloClient.js"),inMemoryCache=__webpack_require__("./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js"),ApolloProvider=__webpack_require__("./node_modules/@apollo/client/react/context/ApolloProvider.js"),MockedProvider=function(_super){function MockedProvider(props){var _this=_super.call(this,props)||this,_a=_this.props,mocks=_a.mocks,addTypename=_a.addTypename,defaultOptions=_a.defaultOptions,cache=_a.cache,resolvers=_a.resolvers,link=_a.link,client=new ApolloClient.f({cache:cache||new inMemoryCache.h({addTypename:addTypename}),defaultOptions:defaultOptions,link:link||new MockLink(mocks||[],addTypename),resolvers:resolvers});return _this.state={client:client},_this}return(0,tslib_es6.ZT)(MockedProvider,_super),MockedProvider.prototype.render=function(){var _a=this.props,children=_a.children,childProps=_a.childProps;return react.isValidElement(children)?react.createElement(ApolloProvider.e,{client:this.state.client},react.cloneElement(react.Children.only(children),(0,tslib_es6.pi)({},childProps))):null},MockedProvider.prototype.componentWillUnmount=function(){this.state.client.stop()},MockedProvider.defaultProps={addTypename:!0},MockedProvider}(react.Component),error=__webpack_require__("./node_modules/@apollo/client/link/error/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),_excluded=["mocks"];function MockApiProvider(props){var _props$mocks=props.mocks,mocks=void 0===_props$mocks?[]:_props$mocks,otherProps=(0,objectWithoutProperties.Z)(props,_excluded),mockLink=new MockLink(mocks),errorLoggingLink=(0,error.q)((function(_ref){var graphQLErrors=_ref.graphQLErrors,networkError=_ref.networkError;graphQLErrors&&graphQLErrors.map((function(_ref2){var message=_ref2.message,locations=_ref2.locations,path=_ref2.path;return console.log("[GraphQL error]: Message: ".concat(message,", Location: ").concat(locations,", Path: ").concat(path))})),networkError&&console.log("[Network error]: ".concat(networkError))})),link=ApolloLink.i.from([errorLoggingLink,mockLink]);return(0,jsx_runtime.jsx)(MockedProvider,(0,objectSpread2.Z)((0,objectSpread2.Z)({},otherProps),{},{link:link}))}try{MockApiProvider.displayName="MockApiProvider",MockApiProvider.__docgenInfo={description:"",displayName:"MockApiProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/ApiProvider/MockApiProvider.tsx#MockApiProvider"]={docgenInfo:MockApiProvider.__docgenInfo,name:"MockApiProvider",path:"src/providers/ApiProvider/MockApiProvider.tsx#MockApiProvider"})}catch(__react_docgen_typescript_loader_error){}var FindCare_types=__webpack_require__("./src/views/FindCare/types/index.ts"),careGaps=[{code:FindCare_types.I.CGC4,title:"Get a BMI assessment",description:"Body mass index (BMI) is used to estimate body fat and if a person is at a healthy weight. Higher body fat can be related to an increased risk of some diseases.",searchTerm:"",learnMore:"Body mass index (BMI) is used to estimate body fat and if a person is at a healthy weight. Higher body fat can be related to an increased risk of some diseases.",count:0,displayOrder:1,completedOn:"",taxonomies:[]},{code:FindCare_types.I.CGC2,title:"Take a health survey",description:"Preventive health screenings are recommended for persons interested in learning more about their health and the steps they can take to live healthier.",searchTerm:"",learnMore:"Preventive health screenings are recommended for persons interested in learning more about their health and the steps they can take to live healthier.",count:0,displayOrder:1,completedOn:"",taxonomies:[]},{code:FindCare_types.I.CGC5,title:"Get a flu vaccine",description:"Body mass index (BMI) is used to estimate body fat and if a person is at a healthy weight. Higher body fat can be related to an increased risk of some diseases.",searchTerm:"",learnMore:"Body mass index (BMI) is used to estimate body fat and if a person is at a healthy weight. Higher body fat can be related to an increased risk of some diseases.",count:0,displayOrder:1,completedOn:"",taxonomies:[]},{code:FindCare_types.I.CGC1,title:"Get your eyes checked",description:"Body mass index (BMI) is used to estimate body fat and if a person is at a healthy weight. Higher body fat can be related to an increased risk of some diseases.",searchTerm:"",learnMore:"Body mass index (BMI) is used to estimate body fat and if a person is at a healthy weight. Higher body fat can be related to an increased risk of some diseases.",count:0,displayOrder:1,completedOn:"",taxonomies:[]}],mocks=[{request:{query:types.xiQ,variables:{langCode:"EN"}},result:{data:{careGaps:{recurring:{open:careGaps,completed:[]},annual:{open:[],completed:[]}}}}}],MockCareGapsProvider=function MockCareGapsProvider(_ref){var children=_ref.children;return(0,jsx_runtime.jsx)(MockApiProvider,{mocks:mocks,children:children})};try{MockCareGapsProvider.displayName="MockCareGapsProvider",MockCareGapsProvider.__docgenInfo={description:"",displayName:"MockCareGapsProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/views/FindCare/mocks/MockCareGapsProvider.tsx#MockCareGapsProvider"]={docgenInfo:MockCareGapsProvider.__docgenInfo,name:"MockCareGapsProvider",path:"src/views/FindCare/mocks/MockCareGapsProvider.tsx#MockCareGapsProvider"})}catch(__react_docgen_typescript_loader_error){}var MockProviderLanguagesProvider_mocks=[{request:{query:types.ICt},result:{data:{retrieveProvidersLanguages:[{name:"English",nativeName:"English",languageCode:"en"},{name:"Spanish",nativeName:"Español",languageCode:"es"},{name:"Hindi",nativeName:"हिन्दी",languageCode:"hi"},{name:"Arabic",nativeName:"العربية",languageCode:"ar"},{name:"Russian",nativeName:"Русский",languageCode:"ru"},{name:"Tagalog",nativeName:"Tagalog",languageCode:"tl"},{name:"Polish",nativeName:"Polski",languageCode:"pl"},{name:"Hungarian",nativeName:"Magyar",languageCode:"hu"},{name:"Tamil",nativeName:"தமிழ்",languageCode:"ta"},{name:"Telugu",nativeName:"తెలుగు",languageCode:"te"},{name:"Turkish",nativeName:"Türkçe",languageCode:"tr"},{name:"Ukrainian",nativeName:"Українська",languageCode:"uk"}]}}}],MockProviderLanguagesProvider=function MockProviderLanguagesProvider(_ref){var children=_ref.children;return(0,jsx_runtime.jsx)(MockApiProvider,{mocks:MockProviderLanguagesProvider_mocks,children:children})};try{MockProviderLanguagesProvider.displayName="MockProviderLanguagesProvider",MockProviderLanguagesProvider.__docgenInfo={description:"",displayName:"MockProviderLanguagesProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/views/FindCare/mocks/MockProviderLanguagesProvider.tsx#MockProviderLanguagesProvider"]={docgenInfo:MockProviderLanguagesProvider.__docgenInfo,name:"MockProviderLanguagesProvider",path:"src/views/FindCare/mocks/MockProviderLanguagesProvider.tsx#MockProviderLanguagesProvider"})}catch(__react_docgen_typescript_loader_error){}var MockFindCareProvider_mocks=[{request:{query:types.eUr,variables:{request:{filters:{npiList:null,onlyInNetwork:null,taxonomies:null},searchTerm:"search",memberLanguage:types.fdV.En}}},result:{data:{freeTextSearch:{providers:[{searchTerm:"Provider",npi:"123"}],conditions:[{searchTerm:"Condition",taxonomyCodes:["123"]}],specialties:[{searchTerm:"Specialty",taxonomyCodes:["123"]}],procedures:[{searchTerm:"Procedure",careGapCode:FindCare_types.I.CGC1}]}}}}],MockFindCareProvider=function MockFindCareProvider(_ref){var children=_ref.children;return(0,jsx_runtime.jsx)(MockApiProvider,{mocks:MockFindCareProvider_mocks,children:children})};try{MockFindCareProvider.displayName="MockFindCareProvider",MockFindCareProvider.__docgenInfo={description:"",displayName:"MockFindCareProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/views/FindCare/mocks/MockFindCareProvider.tsx#MockFindCareProvider"]={docgenInfo:MockFindCareProvider.__docgenInfo,name:"MockFindCareProvider",path:"src/views/FindCare/mocks/MockFindCareProvider.tsx#MockFindCareProvider"})}catch(__react_docgen_typescript_loader_error){}}}]);